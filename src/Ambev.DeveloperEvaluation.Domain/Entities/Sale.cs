using System.ComponentModel.DataAnnotations;
using Ambev.DeveloperEvaluation.Common.Validation;
using Ambev.DeveloperEvaluation.Domain.Common;
using Ambev.DeveloperEvaluation.Domain.Enums;
using Ambev.DeveloperEvaluation.Domain.Validation;
using Ambev.DeveloperEvaluation.Domain.ValueObjects;

namespace Ambev.DeveloperEvaluation.Domain.Entities;

public class Sale : BaseEntity
{
    /// <summary>
    /// Gets the sale number.
    /// Sequence number generated by the system to identify the sale.
    /// </summary>
    [Required(ErrorMessage = "Sale number is required.")]
    [Range(1, int.MaxValue, ErrorMessage = "Sale number must be greater than zero.")]
    public int Number { get; set; }

    /// <summary>
    /// Gets the date and time when the sale was made.
    /// Use the UTC time zone to store the date.
    /// </summary>
    [Required(ErrorMessage = "Sale date is required.")]
    public DateTime Date { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Gets the date and time when the sale was last updated.
    /// </summary>
    public DateTime? UpdatedAt { get; set; } = null;

    /// <summary>
    /// Gets the total value of the sale.
    /// Must be calculated based on the sum of the products in the sale.
    /// </summary>
    [Range(0, double.MaxValue, ErrorMessage = "Total value must be zero or greater.")]
    public decimal TotalValue { get; set; }

    /// <summary>
    /// Gets the sale status.
    /// </summary>
    [Required(ErrorMessage = "Sale status is required.")]
    public SaleStatus Status { get; set; } = SaleStatus.Active;

    /// <summary>
    /// Gets the user who performed the sale.
    /// </summary>
    [Required(ErrorMessage = "User ID is required.")]
    public Guid UserId { get; set; }

    public User? User { get; set; }

    /// <summary>
    /// Performs validation of the <see cref="Sale" /> entity using the <see cref="SaleValidator"/> rules.
    /// </summary>
    /// <returns>
    /// A <see cref="ValidationResultDetail"/> containing:
    /// - IsValid: Indicates whether all validation rules passed.
    /// - Errors: Collection of validation errors if any rules failed.
    /// </returns>
    /// <remarks>
    /// <listheader>Validation rules include:</listheader>
    /// <list type="bullet">Checking the existence of products in the sale</list>
    /// </remarks>
    public ValidationResultDetail Validate()
    {
        var validator = new SaleValidator();
        var result = validator.Validate(this);
        return new ValidationResultDetail
        {
            IsValid = result.IsValid,
            Errors = result.Errors.Select(o => (ValidationErrorDetail)o)
        };
    }

    /// <summary>
    /// Gets the list of products in the sale.
    /// </summary>
    [Required(ErrorMessage = "At least one product must be included in the sale.")]
    public ICollection<ProductSale> ProductSales { get; set; } = [];

    /// <summary>
    /// Calculates the total value of the sale.
    /// </summary>
    public void CalculateTotalValue()
    {
        ProductSales.ToList().ForEach(p => p.CalculateTotalAmount());
        TotalValue = ProductSales
            .Where(p => p.Status != SaleStatus.Canceled)
            .Sum(p => p.TotalAmount);
    }
}
